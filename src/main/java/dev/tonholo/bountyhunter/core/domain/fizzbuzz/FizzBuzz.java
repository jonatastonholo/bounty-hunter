package dev.tonholo.bountyhunter.core.domain.fizzbuzz;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public final class FizzBuzz {
    private final int fizzNumberRule;
    private final String fizzExpressionRule;
    private final int buzzNumberRule;
    private final String buzzExpressionRule;

    @Autowired
    public FizzBuzz(
            @Value("${core.domain.fizzbuzz.fizz.numberRule}") final int fizzNumberRule,
            @Value("${core.domain.fizzbuzz.fizz.expressionRule}") final String fizzExpressionRule,
            @Value("${core.domain.fizzbuzz.buzz.numberRule}") final int buzzNumberRule,
            @Value("${core.domain.fizzbuzz.buzz.expressionRule}") final String buzzExpressionRule) {
        this.fizzNumberRule = fizzNumberRule;
        this.fizzExpressionRule = fizzExpressionRule;
        this.buzzNumberRule = buzzNumberRule;
        this.buzzExpressionRule = buzzExpressionRule;
    }

    /**
     * <p> Convert inputted number in an string based on defined configuration for Fizz and Buzz Rules.</p>
     * <p>
     * Rules:
     * <ul>
     *    <li>If the number is divisible by {@link FizzBuzz#fizzNumberRule} will return {@link FizzBuzz#fizzExpressionRule}</li>
     *    <li>If the number is divisible by {@link FizzBuzz#buzzNumberRule} will return {@link FizzBuzz#buzzExpressionRule}</li>
     *    <li>If the number is divisible by {@link FizzBuzz#fizzNumberRule} and {@link FizzBuzz#buzzNumberRule} will return {@link FizzBuzz#fizzExpressionRule}+{@link FizzBuzz#buzzExpressionRule}</li>
     *    <li>Otherwise, will return the inputted number as String.</li>
     * </ul>
     * </p>
     * <p>
     *     Example:
     *     <pre>
     *         {@link FizzBuzz#fizzNumberRule} = 3;
     *         {@link FizzBuzz#fizzExpressionRule} = "fizz";
     *         {@link FizzBuzz#buzzNumberRule} = 5;
     *         {@link FizzBuzz#buzzExpressionRule} = buzz;
     *
     *         convert(9);  // out -> "fizz"
     *         convert(20); // out -> "fizz"
     *         convert(15); // out -> "fizzbuzz"
     *         convert(2);  // out -> "2"
     *     </pre>
     * </p>
     *
     * @param number to convert
     * @return the String generated by the rule
     */
    public String convert(final int number) {
        final var out = new StringBuilder();
        if (isFizz(number)) out.append(fizzExpressionRule);
        if (isBuzz(number)) out.append(buzzExpressionRule);
        if (out.isEmpty()) out.append(number);
        return out.toString();
    }

    private boolean isFizz(final int number) {
        return number % fizzNumberRule == 0;
    }

    private boolean isBuzz(final int number) {
        return number % buzzNumberRule == 0;
    }
}
